// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  username      String?   @unique
  password      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  sentFriendRequests     Friend[] @relation("SentFriendRequests")
  receivedFriendRequests Friend[] @relation("ReceivedFriendRequests")

  friends          Friend[]  @relation("Friends")
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}

model Friend {
  id     String  @id @default(cuid())
  User   User?   @relation("Friends", fields: [userId], references: [id])
  userId String?

  requester   User?   @relation("SentFriendRequests", fields: [requesterId], references: [id])
  receiver    User?   @relation("ReceivedFriendRequests", fields: [receiverId], references: [id])
  requesterId String?
  receiverId  String?

  status FriendRequestStatus @default(PENDING)

  @@unique([requesterId, receiverId])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Message {
  id         String  @id @default(cuid())
  message    String
  sender     User    @relation("SentMessages", fields: [senderId], references: [id])
  senderId   String
  receiver   User    @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String
  image      String?
  username   String?

  createdAt DateTime @default(now())
}
